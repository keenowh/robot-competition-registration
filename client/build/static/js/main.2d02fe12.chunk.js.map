{"version":3,"sources":["component/layout/GlobalLayout.tsx","component/api/register.js","component/modal/ModalComponent.tsx","component/firstForm/FirstForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Main","main","GlobalLayout","props","children","registerCompetition","data","comp","playersData","Object","keys","map","k","charAt","toSubmit","compName","players","coach","school","axios","post","StyledPlayerInput","input","StyledLabel","label","StyledForm","form","HeaderBlock","h3","SubHeaderBlock","h5","InputWrap","div","ModalComponent","isOpen","setModal","useForm","register","handleSubmit","playerInput","i","push","key","type","placeholder","name","ref","console","log","open","center","onClose","classNames","overlay","modal","onSubmit","Block","CompForm","CompLabel","SelectDiv","SelectInp","select","SelectDropDown","DropDownSVG","svg","CopyrightBlock","p","SubmitButton","button","competitionData","CompOptions","competition","index","value","FirstForm","useState","modalisOpen","setModalOpen","setSelect","onClick","e","info","find","element","adjuster","target","xmlns","viewBox","d","preventDefault","openModal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d02fe12.chunk.js","sourcesContent":["import React from \"react\";\r\nimport tw from \"twin.macro\";\r\n\r\nexport interface LayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Main = tw.main`box-border flex font-sans items-center bg-gray-600 justify-center h-screen`;\r\n\r\nconst GlobalLayout = (props: LayoutProps) => {\r\n  return <Main>{props.children}</Main>;\r\n};\r\nexport default GlobalLayout;\r\n","import axios from \"axios\";\r\n\r\nconst registerCompetition = (data, comp) => {\r\n  let playersData = {};\r\n  Object.keys(data).map((k) => {\r\n    if (k.charAt(0) === \"p\") {\r\n      playersData[k] = data[k];\r\n    }\r\n  });\r\n  const toSubmit = {\r\n    compName: comp[\"name\"],\r\n    players: playersData,\r\n    coach: data[\"coach\"],\r\n    school: data[\"school\"],\r\n  };\r\n\r\n  // console.log(toSubmit);\r\n  axios.post(\"register\", toSubmit);\r\n};\r\n\r\nexport default registerCompetition;\r\n","import React from \"react\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport tw from \"twin.macro\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"./ModalStyle.css\";\r\nimport registerCompetition from \"../api/register\";\r\n\r\n// ------------------- Props inteface\r\ninterface Props {\r\n  comp: {\r\n    name: string;\r\n    players: number;\r\n  };\r\n  isOpen: boolean;\r\n  setModal: any;\r\n}\r\n\r\n// ------------- Style Blocks ---------------------\r\n\r\n// const StyledPlayerInput = tw.input`w-full mb-2 py-2 font-medium bg-gray-200 rounded-lg`;\r\nconst StyledPlayerInput = tw.input`box-border w-full shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline`;\r\n\r\nconst StyledLabel = tw.label`block text-gray-700 text-sm font-bold mb-2`;\r\n\r\nconst StyledForm = tw.form`box-border w-full py-4 flex flex-col self-center  font-sans`;\r\n\r\nconst HeaderBlock = tw.h3`px-4 font-sans font-semibold mb-0`;\r\n\r\nconst SubHeaderBlock = tw.h5`px-4 font-sans mt-0`;\r\n\r\nconst InputWrap = tw.div`self-center w-9/12 mb-2`;\r\n// ------------------------------------------------\r\n\r\nconst ModalComponent: React.FC<Props> = ({ comp, isOpen, setModal }) => {\r\n  const { register, handleSubmit } = useForm();\r\n\r\n  const playerInput: Array<JSX.Element> = [];\r\n\r\n  for (let i = 1; i < comp[\"players\"] + 1; i++) {\r\n    playerInput.push(\r\n      <InputWrap key={i}>\r\n        <StyledLabel>Player {i}</StyledLabel>\r\n        <StyledPlayerInput\r\n          type=\"text\"\r\n          placeholder={`Player ${i}`}\r\n          name={`player${i}`}\r\n          ref={register}\r\n        />\r\n      </InputWrap>\r\n    );\r\n  }\r\n\r\n  const onSubmit = (data: any) => {\r\n    // console.log(data)\r\n    registerCompetition(data, comp)\r\n  };\r\n  console.log(\"rendered\");\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      center\r\n      onClose={() => setModal(false)}\r\n      classNames={{\r\n        overlay: \"customOverlay\",\r\n        modal: \"customModal\",\r\n      }}\r\n    >\r\n      <HeaderBlock>Register your team</HeaderBlock>\r\n      <SubHeaderBlock>{comp[\"name\"]}</SubHeaderBlock>\r\n      <hr />\r\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\r\n        {playerInput}\r\n        <InputWrap>\r\n          <StyledLabel>Coach</StyledLabel>\r\n          <StyledPlayerInput\r\n            type=\"text\"\r\n            placeholder=\"Coach\"\r\n            name=\"coach\"\r\n            ref={register}\r\n          ></StyledPlayerInput>\r\n        </InputWrap>\r\n        <InputWrap>\r\n          <StyledLabel>School</StyledLabel>\r\n          <StyledPlayerInput\r\n            type=\"text\"\r\n            placeholder=\"School\"\r\n            name=\"school\"\r\n            ref={register}\r\n          ></StyledPlayerInput>\r\n        </InputWrap>\r\n        <input type=\"submit\" />\r\n      </StyledForm>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalComponent;\r\n","import React, { useState } from \"react\";\r\nimport tw from \"twin.macro\";\r\nimport ModalComponent from \"../modal/ModalComponent\";\r\n\r\n\r\nconst Block = tw.div`bg-white text-white font-bold rounded-lg border shadow-lg xs:w-9/12 md:max-w-md`;\r\n\r\nconst CompForm = tw.form`xs:p-4 md:px-8`;\r\n\r\nconst CompLabel = tw.label`block uppercase tracking-wide text-gray-700 text-sm font-bold mb-2`;\r\n\r\nconst SelectDiv = tw.div`relative mb-4`;\r\n\r\nconst SelectInp = tw.select`bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500`;\r\n\r\nconst SelectDropDown = tw.div`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700`;\r\n\r\nconst DropDownSVG = tw.svg`fill-current h-4 w-4`;\r\n\r\nconst CopyrightBlock = tw.p`text-center px-4 text-gray-500 text-xs`;\r\n\r\nconst SubmitButton = tw.button`bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded`;\r\n\r\nconst competitionData = [\r\n  { name: \"--- Select Competition ---\", players: 2 },\r\n  { name: \"Line Tracing\", players: 2 },\r\n  { name: \"A-mazing Challenge JR\", players: 2 },\r\n  { name: \"A-mazing Challenge SR\", players: 2 },\r\n  { name: \"Smart Factory\", players: 2 },\r\n  { name: \"Captain Court\", players: 2 },\r\n  { name: \"Sumo Basic\", players: 2 },\r\n  { name: \"Sumobot 3KG\", players: 2 },\r\n  { name: \"Sumo Lego\", players: 2 },\r\n  { name: \"Grab and Collect\", players: 2 },\r\n  { name: \"Maze Robot\", players: 2 },\r\n  { name: \"Sumo Derby\", players: 5 },\r\n];\r\n\r\nconst CompOptions = competitionData.map((competition, index) => {\r\n  return (\r\n    <option key={index} value={competition.name}>\r\n      {competition.name}\r\n    </option>\r\n  );\r\n});\r\n\r\nconst FirstForm = () => {\r\n  const [modalisOpen, setModalOpen] = useState(false);\r\n  const [select, setSelect] = useState({ name: \"\", players: 2 });\r\n\r\n  function adjuster(e: any): void {\r\n    let info: any = competitionData.find((element) => element.name === e);\r\n    setSelect(info);\r\n  }\r\n  function openModal(e: any) {\r\n    e.preventDefault();\r\n    setModalOpen(true);\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CompForm>\r\n          <CompLabel>State</CompLabel>\r\n        <SelectDiv>\r\n          <SelectInp\r\n            onClick={(e) => adjuster((e.target as HTMLSelectElement).value)}\r\n          >\r\n            {CompOptions}\r\n          </SelectInp>\r\n          <SelectDropDown>\r\n            <DropDownSVG\r\n              xmlns={\"http://www.w3.org/2000/svg\"}\r\n              viewBox={\"0 0 20 20\"}\r\n            >\r\n              <path\r\n                d={\r\n                  \"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"\r\n                }\r\n              />\r\n            </DropDownSVG>\r\n          </SelectDropDown>\r\n        </SelectDiv>\r\n        <SubmitButton onClick={(e) => openModal(e)}>Proceed</SubmitButton>\r\n\r\n        <ModalComponent\r\n          isOpen={modalisOpen}\r\n          setModal={setModalOpen}\r\n          comp={select}\r\n        />\r\n      </CompForm>\r\n      <CopyrightBlock>\r\n        &copy;2020 De La Salle Araneta University.<br></br> All rights reserved.\r\n      </CopyrightBlock>\r\n    </Block>\r\n  );\r\n};\r\n\r\nexport default FirstForm;\r\n","import React from \"react\";\r\nimport GlobalLayout from \"./component/layout/GlobalLayout\";\r\nimport FirstForm from \"./component/firstForm/FirstForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalLayout>\r\n        <FirstForm />\r\n      </GlobalLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}